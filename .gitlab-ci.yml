stages:
  - configure
  - build
  - check-warnings
  - test
  - deploy

.docker_build:
  image: 'docker:19.03.11'
  stage: .pre
  services:
    - docker:19.03.11-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd test/ci/${IMAGE_NAME}/
    - docker build -t registry.gitlab.com/akantu/akantu/${IMAGE_NAME} .
    - docker push registry.gitlab.com/akantu/akantu/${IMAGE_NAME}

docker build:debian-testing:
  variables:
    IMAGE_NAME: debian:testing
  extends: .docker_build
  rules:
    - changes:
        - test/ci/debian:testing/Dockerfile

docker build:ubuntu-lts:
  variables:
    IMAGE_NAME: ubuntu:lts
  extends: .docker_build
  rules:
    - changes:
        - test/ci/ubuntu:lts/Dockerfile

.configure:
  stage: configure
  except:
    - tags
  variables:
    BLA_VENDOR: 'Generic'
  script:
    - cmake -E make_directory build
    - cd build
    - cmake -DAKANTU_COHESIVE_ELEMENT:BOOL=TRUE
            -DAKANTU_IMPLICIT:BOOL=TRUE
            -DAKANTU_PARALLEL:BOOL=TRUE
            -DAKANTU_STRUCTURAL_MECHANICS:BOOL=TRUE
            -DAKANTU_HEAT_TRANSFER:BOOL=TRUE
            -DAKANTU_DAMAGE_NON_LOCAL:BOOL=TRUE
            -DAKANTU_PHASE_FIELD:BOOL=TRUE
            -DAKANTU_PYTHON_INTERFACE:BOOL=TRUE
            -DAKANTU_EXAMPLES:BOOL=TRUE
            -DAKANTU_BUILD_ALL_EXAMPLES:BOOL=TRUE
            -DAKANTU_TEST_EXAMPLES:BOOL=TRUE
            -DAKANTU_TESTS:BOOL=TRUE
            -DAKANTU_RUN_IN_DOCKER:BOOL=TRUE
            -DCMAKE_BUILD_TYPE:STRING=Coverage ..
     - cp compile_commmands.json ..
  artifacts:
    when: on_success
    paths:
      - build
      - compile_commands.json
    expire_in: 10h

.build:
  stage: build
  script:
    - cmake --build build/src > >(tee -a ${output}-out.log) 2> >(tee -a ${output}-err.log >&2)
    - cmake --build build/python > >(tee -a ${output}-out.log) 2> >(tee -a ${output}-err.log >&2)
    - cmake --build build/test/ > >(tee -a ${output}-out.log) 2> >(tee -a ${output}-err.log >&2)
    - cmake --build build/examples > >(tee -a ${output}-out.log) 2> >(tee -a ${output}-err.log >&2)
  artifacts:
    when: on_success
    paths:
      - build/
      #- ${output}-out.log
      - ${output}-err.log
      - compile_commands.json
    expire_in: 10h

.tests:
  stage: test
  script:
    - cd build
    - ctest -T test --no-compress-output --timeout 1800
  after_script:
    - cd build
    - tag=$(head -n 1 < Testing/TAG)
    - if [ -e Testing/${tag}/Test.xml ]; then
    -   xsltproc -o ./juint.xml ${CI_PROJECT_DIR}/test/ci/ctest2junit.xsl Testing/${tag}/Test.xml;
    - fi
    - gcovr --xml
            --gcov-executable "${GCOV_EXECUTABLE}"
            --output coverage.xml
            --object-directory ${CI_PROJECT_DIR}/build
            --root ${CI_PROJECT_DIR}  -s || true
  artifacts:
    when: always
    paths:
      - build/juint.xml
      - build/coverage.xml
    reports:
      junit:
        - build/juint.xml
      cobertura:
        - build/coverage.xml

.analyse_build:
  stage: check-warnings
  script:
    - if [[ $(cat ${output}-err.log | grep warning -i) ]]; then
    -    cat ${output}-err.log;
    -    exit 1;
    - fi
  allow_failure: true
  artifacts:
    when: on_failure
    paths:
      - "$output-err.log"

# ------------------------------------------------------------------------------
.cache_build:
  variables:
    CCACHE_BASEDIR: ${CI_PROJECT_DIR}/build
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CCACHE_NOHASHDIR: 1
    CCACHE_COMPILERCHECK: content
  cache:
    key: ${output}
    policy: pull-push
    paths:
      - .ccache/
      - third-party/google-test
      - third-party/pybind11
  before_script:
    - ccache --zero-stats || true
  after_script:
    - ccache --show-stats || true

# ------------------------------------------------------------------------------
.image_debian_testing:
  image: registry.gitlab.com/akantu/akantu/debian:testing

.image_ubuntu_lts:
  image: registry.gitlab.com/akantu/akantu/ubuntu:lts

# ------------------------------------------------------------------------------
.compiler_gcc:
  variables:
    CC: /usr/lib/ccache/gcc
    CXX: /usr/lib/ccache/g++
    FC: gfortran
    GCOV_EXECUTABLE: gcov

.compiler_clang:
  variables:
    CC: /usr/lib/ccache/clang
    CXX: /usr/lib/ccache/clang++
    FC: gfortran
    GCOV_EXECUTABLE: llvm-cov gcov

# ------------------------------------------------------------------------------
.debian_testing_gcc:
  variables:
    output: debian_testing_gcc
  extends:
    - .compiler_gcc
    - .image_debian_testing
    - .cache_build

.debian_testing_clang:
  variables:
    output: debian_testing_clang
  extends:
    - .compiler_clang
    - .image_debian_testing
    - .cache_build

.ubuntu_lts_gcc:
  variables:
    output: ubuntu_lts_gcc
  extends:
    - .compiler_gcc
    - .image_ubuntu_lts
    - .cache_build

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
configure:debian_testing_gcc:
  extends:
    - .debian_testing_gcc
    - .configure
  cache:
    policy: pull-push

build:debian_testing_gcc:
  extends:
    - .debian_testing_gcc
    - .build
  dependencies:
    - configure:debian_testing_gcc

test:debian_testing_gcc:
  extends:
    - .debian_testing_gcc
    - .tests
  dependencies:
    - build:debian_testing_gcc

analyse_build:debian_testing_gcc:
  extends:
    - .debian_testing_gcc
    - .analyse_build
  dependencies:
    - build:debian_testing_gcc

# ------------------------------------------------------------------------------
configure:debian_testing_clang:
  extends:
    - .debian_testing_clang
    - .configure
  cache:
    policy: pull-push

build:debian_testing_clang:
  extends:
    - .debian_testing_clang
    - .build
  dependencies:
    - configure:debian_testing_clang

test:debian_testing_clang:
  extends:
    - .debian_testing_clang
    - .tests
  dependencies:
    - build:debian_testing_clang

analyse_build:debian_testing_clang:
  extends:
    - .debian_testing_clang
    - .analyse_build
  dependencies:
    - build:debian_testing_clang

# ------------------------------------------------------------------------------
configure:ubuntu_lts_gcc:
  extends:
    - .ubuntu_lts_gcc
    - .configure
  cache:
    policy: pull-push

build:ubuntu_lts_gcc:
  extends:
    - .ubuntu_lts_gcc
    - .build
  dependencies:
    - configure:ubuntu_lts_gcc

analyse_build:ubuntu_lts_gcc:
  extends:
    - .ubuntu_lts_gcc
    - .analyse_build
  dependencies:
    - build:ubuntu_lts_gcc

test:ubuntu_lts_gcc:
  extends:
    - .ubuntu_lts_gcc
    - .tests
  dependencies:
    - build:ubuntu_lts_gcc

# ------------------------------------------------------------------------------
code_quality:
  stage: test
  image: docker:19.03.12
  allow_failure: true
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    CODECLIMATE_DEV: 1
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.22"
  needs: []
  script:
    - export SOURCE_CODE=$PWD
    - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
      function propagate_env_vars() {
        CURRENT_ENV=$(printenv)
        for VAR_NAME; do
          echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
        done
      }
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - |
    - docker build  -t codeclimate/codeclimate-clang-tidy test/ci/codeclimate/codeclimate-clang-tidy
    - |
      docker run \
        $(propagate_env_vars \
          SOURCE_CODE \
          TIMEOUT_SECONDS \
          CODECLIMATE_DEBUG \
          CODECLIMATE_DEV \
          REPORT_STDOUT \
          REPORT_FORMAT \
          ENGINE_MEMORY_LIMIT_BYTES \
        ) \
        --volume "$PWD":/code \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    paths:
      - gl-code-quality-report.json
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

# ------------------------------------------------------------------------------
pages:
  stage: deploy
  extends:
    - .debian_testing_gcc
  script:
    - cd build
    - cmake -DAKANTU_DOCUMENTATION=ON ..
    - cmake --build . -t sphinx-doc
    - mv doc/dev-doc/html ../public
  dependencies:
    - build:debian_testing_gcc
  artifacts:
    paths:
      - public
  only:
    - master
